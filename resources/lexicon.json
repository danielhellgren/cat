{
  "language-of-the-machines-title":{
    "en":"\"The Language of the Machines\"",
    "se":"\"Maskinernas språk\""
  },
  "language-of-the-machines-text":{
    "en":"You have probably already heard of binary and it being \"the language of the machines\". But do you know what it is and how it works?<br><br> Computers run on electricity and inside the circuits a wire can either have current flowing through it -  ON. Or it can have no current flowing through it - OFF. These two states are represented by the numbers 1 and 0 - binary.<br><br> Before exploring binary further it is good to understand our standard numerical system based on the number ten - decimal.",
    "se":"Du har förmodligen redan hört talas om binära tal och att det är \"Maskinernas språk\". Men vet du vad det är och hur det fungerar?<br><br>Datorer drivs av elekrticitet och inuti kretsarna kan det antingen flöda ström - PÅ. Eller så kan det inte flöda ström genom kretsarna - AV. Dessa två lägen kan representeras av nummren 1 och 0 - binärt.<br><br>Men först är det bra att förstå hur vårt standard numeriska system fungerar, baserat på talet tio - decimala tal"
  },
  "decimal-title":{
    "en":"Decimal - base ten",
    "se":"Decimaltal - bas tio"
  },
  "decimal-text":{
    "en":"Normally, we use TEN symbols to represent ALL numbers:<br><br>0 1 2 3 4 5 6 7 8 9 <br><br>So we can count up to nine before we run out of symbols to use. Instead of adding another symbol for higher numbers, which would lead to a huge amount of symbols to remember. We add reuse the same symbols via the Positional Notation System - INSERT REF. So when we arrive at the end of our symbols - 9, we have to add a digit to the left and start over from 0 - 10.<br> Meaning if you look at a single symbol in a number of base ten that digit is ten times the size of it's neighbour to the right.<br><br> The number 1,329,354 represents:<br><br> 1x1,000,000 + 3x100,000 + 2x10,000 + 9x1,000 + 3x100 + 5x10 + 4x1",
    "se":"Normalt sätt, använder vi TIO symboler för att representera ALLA tal:<br><br>0 1 2 3 4 5 6 7 8 9 <br><br> Alltså kan vi räkna upp till nio innan vi har slut på symboler. Istället ör att skapa nya symboler för högre tal, vilket hade lett till orimligt mång att lägga på minnet. Så använder vi samma symboler via Positionssystemet - REF HÄR. När vi kommer till slutat av våra symboler - 9, så lägger vi till en siffra till vänster om nuvarande och börjar om från noll (10).<br>Detta betyder att en symbol i ett tal är värt 10 gånger mer än sin granne till höger.<br><br> Nummret 1,329,354 representerar:<br><br>1x1,000,000 + 3x100,000 + 2x10,000 + 9x1,000 + 3x100 + 5x10 + 4x1"
  },
  "binary-title":{
    "en":"Binary - base two",
    "se":"Binära tal - bas två"
  },
  "binary-text":{
    "en":"Now that we have a clear view of decimal it is time to look at binary. Binary works the same way as decimal only it is using the number 2 as the base. So we have TWO symbols to represent ALL numbers:<br><br>1 0<br><br>In the same way we have to add a digit to the left and start from zero once we reach the end of our symbols. And that means every digit has double the value of it's neighbour to the right.<br><br>So the number 10101101, represents:<br><br>1x128 + 0x64 + 1x32 + 0x16 + 1x8 + 1x4 + 0x2 + 1x1 = 173 (decimal) <br><br>",
    "se":"Nu när vi har klart för oss hur decimaltal fungerar så kan vi gå vidare till binära tal. Bionära tal fungerar precis på samma sätt som decimaltal bara att bas talet är 2. Alltså har vi TWO symboler som representerar ALLA tal:<br><br>1 0<br><br>På samma sätt lägger vi till en 1 till vänster och börjar om från noll när symbolerna tagit slut. Och det betyder att symbolerna i ett tal är värda dubbelt så mycket som sin högra granne. Talet 10101101 representerar:<br><br> 1x128 + 0x64 + 1x32 + 0x16 + 1x8 + 1x4 + 0x2 + 1x1 = 173 (i bas tio) <br><br>"
  },
  "intro-text":{
    "en":"IT is a part of people's work and leisure. Do you want to understand how information technology functions, to influence the development and create tomorrow's technology? As an engineer from the IT program in Uppsala, you can work with information that is important to people in all of life's stages, for the functioning of society and the competitiveness of businesses.",
    "se":"IT genomsyrar människors arbete och fritid. Vill du förstå hur informationsteknologi ­fungerar, påverka utvecklingen och skapa morgondagens teknik? Som civilingenjör från IT-programmet i Uppsala kan du jobba med uppgifter som är betydelsefulla för människor i livets alla stadier, för samhällets funktion och för företagens konkurrenskraft."
  },
  "about-program-title":{
    "en":"About the program",
    "se":"Om Programmet"
  },
  "about-program-text":{
    "en":"Master programme in computer and information engineering generates sustainable education with knowledge that lasts longer. People, mathematics and programming are key ingredients in education. Theory and practice, often in project form, gives you skills you can use both for today’s and tomorrow's system. You will learn what you need to develop future counterparts to Google,  Skype or iPhone. Or maybe develop prostheses with built-in computers or easy to use computers that never crashes?",
    "se":"Civilingenjörsprogrammet i informationsteknologi ger en hållbar utbildning med kunskaper som räcker länge. Människor, matematik och programmering är viktiga ingredienser i utbildningen. Teori och praktik, ofta i projektform, ger dig helhetsperspektiv och färdigheter du kan använda både för dagens och morgondagens system. Du får lära dig vad som behövs för att utveckla framtidens motsvarigheter till Google, Skype eller iPhone. Eller kanske utveckla proteser med inbyggda datorer eller lättanvända datorer som aldrig kraschar?"
  },
  "degree-title":{
    "en":"Degree",
    "se":"Examen"
  },
  "degree-text":{
    "en":"The program leads to an engineering degree, which is a professional degree.",
    "se":"Utbildningen leder till en civilingenjörsexamen, vilket är en yrkesexamen."
  },
  "about-education-title":{
    "en":"About the Education",
    "se":"Om Utbildningen"
  },
  "about-education-text":{
    "en":"Teaching has a strong connection to the university's outstanding research in information technology. Many of the courses are characterized by innovative teaching and exam forms based on scientific anchored education. Many of the teachers have received awards for their educational teaching.<br><br> The courses are often implemented in projects in preparation for working life. Several of the projects are conducted in collaboration with students in other countries. The program concludes with a greater applied projects on a full or half semester. You work independently and creatively in an internationally oriented environment. The program is offered in Uppsala.",
    "se":"Undervisningen har stark koppling till universitetets framstående forskning inom informationsteknologi. Många av kurserna präglas av innovativa undervisnings- och examensformer baserade på vetenskaplig förankrad pedagogik. Flera av lärarna har fått pris för sin pedagogiska undervisning.<br><br>Kurserna genomförs ofta i projektform som en förberedelse för arbetslivet. Flera av projekten sker i samarbete med studenter i andra länder. Programmet avslutas med större tilläm­pade projekt över en hel eller halv termin. Du arbetar självständigt och kreativt i en internationellt präglad miljö. Programmet ges i Uppsala.<br><br>Kurs­litteraturen är mestadels på engelska och i de högre årskurserna är undervisningen ofta på engelska."
  },
  "binary":{
    "en":"Binary Numbers",
    "se":"Binära Tal"
  },
  "language-swap":{
    "en":"Svenska",
    "se":"English"
  },
  "gates-intro-title":{
    "en":"Logic Gates - An Introduction",
    "se":"Logiska Grindar - En Introduktion"
  },
  "gates-intro-text":{
    "en":"Digital logic gates are the basic building blocks from which all digital systems are constructed from. They are small electronic circuits, each having one or more than one input and only one output. The relationship between the input and the output is based on a certain logic, called <a href='https://www.tutorialspoint.com/computer_logical_organization/boolean_algebra.htm'>Boolean algebra</a>. Logic gates simply performs these Boolean algebraic operations of AND, OR and NOT on binary numbers, and the most basic gates are thus called AND gate, OR gate and NOT gate.<br><br>In digital logic design only two voltage levels, or \"states\", are allowed and these states are generally referred to as Logic \"1\" and Logic \"0\", High and Low, or True and False. These are the two states represented in Boolean algebra and are in standard truth tables (more on these later) simply denoted by the binary digits of \"1\" and \"0\" respectively. We will tend to use the High/Low state notation throughout this tutorial to avoid confusion, but it is important to know that any of the other notations may appear in other places while referring to the same concept. An intuitive example in order to understand these two states is a simple light switch,  as it is either \"ON\" or \"OFF\" but can not be both at the same time. The different notations for these states and the relationship between them can be summarized as:",
    "se":"Digitala logiska grindar är de grundläggande byggstenarna från vilket alla digitala system är uppbyggda. De är små elektroniska kretsar som var och en har en eller flera insignaler samt endast en utsignal. Sambandet mellan dessa in- och utsignaler baseras på en särskild logik, kallad <a href='https://www.tutorialspoint.com/computer_logical_organization/boolean_algebra.htm'>boolesk algebra</a>. Logiska grindar utför helt enkelt dessa booleska operationer i form av AND, OR och NOT på binära tal, vilket också har gett namnen till de mest grundläggande logiska grindarna: AND-grinden, OR-grinden och NOT-grinden. <br><br>Inom digitala kretsar används enbart två spänningsnivåer, eller “tillstånd”, och de brukar generellt kallas för logisk Etta och logisk Nolla, Hög och Låg eller Sant och Falskt. Dessa är de två tillstånd som används inom den booleska algebran och är i vanliga sanningstabeller (“truth tables” på engelska, mer om dessa lite senare) representerade av de binära talen “1” samt “0”. Vi kommer i denna genomgång försöka hålla oss till beteckningen Hög/Låg för att referera till de olika tillstånden, främst för att undvika förvirring, men det är viktigt att ha koll på att någon av de andra beteckningarna kan förekomma i andra texter men syftar till exakt samma koncept. Ett intuitivt exempel för att få grepp om dessa tillstånd är en vanlig strömbrytare till en lampa, då den antingen kan stå på läget “Av” eller läget \"På\" men inte båda samtidigt. De olika beteckningarna för tillstånden och sambandet mellan dem kan summeras på följande vis:"
  },
  "gates-intro-text2":{
    "en":"Most digital logic gates and digital logic systems use “Positive logic”, in which a logic level “0” or Low is represented by a zero voltage in electrical circuits and a logic level “1” or High is represented by a higher voltage such as +5 volts.",
    "se":"De flesta digitala logiska grindar samt logiska system i allmänhet använder något som kallas för “positiv logik”, vilket innebär att ett Lågt tillstånd representeras av en elektrisk ström på 0 volt i elektriska kretsar samtidigt som ett Högt tillstånd representeras av en högre elektrisk strömstyrka, oftast runt +5 volt."
  },
  "bool-algebra":{
    "en":"Boolean Algebra",
    "se":"Booelsk Algebra"
  },
  "logic-state":{
    "en":"Logic State",
    "se":"Logiskt Tillstånd"
  },
  "voltage-state":{
    "en":"Voltage State",
    "se":"Spänningstillstånd"
  },
  "true":{
    "en":"True",
    "se":"Sann"
  },
  "false":{
    "en":"False",
    "se":"Falsk"
  },
  "high":{
    "en":"High",
    "se":"Högt"
  },
  "low":{
    "en":"Low",
    "se":"Lågt"
  },
  "logic-0":{
    "en":"Logic \"0\"",
    "se":"Logisk \"0\""
  },
  "logic-1":{
    "en":"Logic \"1\"",
    "se":"Logisk \"1\""
  },
  "and-gate-title":{
    "en":"AND Gate",
    "se":"AND Grind"
  },
  "and-gate-text":{
    "en":"Just as the name applies, the AND gate performs an AND operation (again, read more about Boolean algebra <a href='https://www.tutorialspoint.com/computer_logical_organization/boolean_algebra.htm'>here</a>). It has one output and can in theory have any number of inputs, although two inputs is the \"standard\" gate setup and is what we will use here. The output state is normally set to Low and only goes to High when ALL of its inputs are also set to High. These characteristics can be expressed in what is called a <a href='https://en.wikipedia.org/wiki/Truth_table'>truth table</a>, showing what the output state will be given the input combination. The truth table for the AND gate is given as:",
    "se":"Precis som namnet antyder så utför AND-grinden en boolesk operation av typen AND (som tidigare nämnts kan du läsa på mer om boolesk algebra <a href='https://www.tutorialspoint.com/computer_logical_organization/boolean_algebra.htm'>här</a>). Den har en utsignal och kan teoretiskt sett ha vilket antal av insignaler som helst, men två insignaler är “standarduppsättningen” och är det som vi kommer att använda här. Tillståndet på utsignalen är normalt satt till Låg och går endast till Hög när ALLA av grindens insignaler också är satta till Hög. Dessa egenskaper kan uttryckas i vad som brukar kallas för en <a href='https://www.tutorialspoint.com/computer_logical_organization/boolean_algebra.htm'>sanningstabell</a> som visar vad tillståndet på utsignalen kommer att vara givet en viss insignalskombination. Sanningstabellen för AND-grinden ser ut som följande: "
  },
  "and-gate-text2":{
    "en":"The logic or Boolean expression given for a digital logic AND gate is that for Logical Multiplication which is denoted by a single dot or full stop symbol, ( . ) giving us the Boolean expression of:  A.B = Q. Then we can define the operation of a 2-input logic AND gate as being: “If both A and B are true, then Q is true”.",
    "se":"Logiken (det booleska uttrycket) given till en logisk AND-grind är en konjunktion, som betecknas av en punkt (.), vilket ger det booleska uttrycket: INPUT1.INPUT2 = OUTPUT. Vi kan då definiera operationen av en AND-grind med två insignaler enligt: “Om både INPUT1 och INPUT2 är sanna, så är OUTPUT också sann”."
  },
  "and-gate-text3":{
    "en":"The symbols used to represent logic gates can actually vary depending on region, but we are here using the American standard which is the most common when drawing schematics for electrical circuits. In the simple circuit below we have added a 2-input logic AND gate that is connected to two inputs, represented by squares containing a green circle, and one output, represented by a circle containing another green circle (if you are on a computer, you can hover the mouse over any of the logic components to see what they are if needed). These green circles will tell you which state each input and output is currently in, High or Low. A darker green tone represents a Low state while a more neon green tone represents a High state. You can toggle the inputs between High and Low yourself in the circuit simply by double clicking them. Try each combination of inputs given in the AND gate's truth table above, and see how the output changes!",
    "se":"Symbolerna som används för de logiska grindarna kan faktiskt bero på region, men här använder vi den amerikanska standarden vilket är mest vanlig när man ritar krestscheman. I den simpla kretsen nedan har vi lagt till en 2-input AND grind kopplad till två input, representerade som kvadrater kopplade till en grön cirkel, och en output, representerad av en cirkel som innehåller en cirkel (om du befinner tdig på en dator, kan du hålla muspekaren över valfri komponent för att se om dom behövs). Dessa gröna cirklar kommer visa vilket läge varje input och output befinner sig i, Högt eller Lågt. Mörkare grön representerar ett Lågt läge medan en mera neon grön representerar Högt. Du kan växla lägen på varje input mellan Högt och Lågt genom att dubbelklicka dem. Testa varje kombinationav input givet i AND grindens tabell och se hur output ändras!"
  },
  "or-gate-title":{
    "en":"OR Gate",
    "se":"OR Grind"
  },
  "or-gate-text":{
    "en":"Again, as the name applies, the OR gate performs an Boolean OR operation. It has one output and can in theory have any number of inputs, although two inputs is the \"standard\" gate setup, similarly to the AND gate, and is what we will use here. The output state is normally set to Low and only goes to High when one or more of its inputs are also set to High. These characteristics can be expressed in the following truth table:",
    "se":"Återigen, som namnet antyder så är OR grinden en Booelsk OR(Eller) operator. Den har en output och kan i teorin ha odefinerat många inputs, dock är två input \"standarduppsättningen\", likt AND grinden, och detta kommer vi använda här. Output läget är vanligtvis Lågt och går enbart till Högt när en eller fler av alla input är satta till Högt. Dessa egenskaper kan uttryckas i följande tabell:"
  },
  "or-gate-text2":{
    "en":"The logic or Boolean expression given for a digital logic OR gate is that for Logical Addition which is denoted by a plus sign, ( + ) giving us the Boolean expression of:  A+B = Q. Then we can define the operation of a 2-input logic OR gate as being “If either A or B is true, then Q is true”.",
    "se":""
  },
  "or-gate-text3":{
    "en":"In the simple circuit below we have added a 2-input logic OR gate that is connected to two inputs, similarly to the circuit example of the AND gate. Try each combination of inputs given in the OR gate's truth table above, and see how the output changes!",
    "se":""
  },
  "not-gate-title":{
    "en":"NOT Gate",
    "se":"NOT Grind"
  },
  "not-gate-text":{
    "en":"The last of the logic gates that we will cover in this tutorial is the NOT gate, which as you probably have figured out by now performs an Boolean NOT operation. The NOT gate is the most basic of all the logical gates, with only one input and one output. The output level is normally at High and goes to Low when its single input is at High, in other words it \"inverts\" its input signal. This logic gate is therefore sometimes refered to as an Inverter. These characteristics can be expressed in the following truth table:",
    "se":""
  },
  "not-gate-text2":{
    "en":"The output from a NOT gate only returns High again when its input is at Low, giving us the Boolean expression of: !A = Q. Then we can define the operation of a single input digital logic NOT gate as being: “If A is NOT true, then Q is true”.",
    "se":""
  },
  "not-gate-text3":{
    "en":" In the simple circuit below we have added a logic NOT gate that is connected to an input and an output. Try each combination of inputs given in the NOT gate's truth table above, and see how the output changes!",
    "se":""
  },
  "logic-sim-title":{
    "en":"Logic Circuit Simulator",
    "se":"Logisk Krets Simulator"
  },
  "logic-sim-text":{
    "en":"Now that you have some basic knowledge about some of the most common logical gates you can practice your skills in this circuit simulator below. It works similarly to the simple circuit examples you have encountered earlier, but instead of just having the freedom of toggling the inputs from Low to High, you can now create complete circuits on your own! In the menus you can choose the components you want,  and then add them to the \"circuit board\" by selecting and dragging them. Once on the board, inputs can be connected to outputs by clicking and dragging from one of the component's inputs/output to another one. Right clicking on the board will give you a context menu providing undo/redo actions as well as delete, copy and paste. Have fun!",
    "se":""
  },
  "logic-gates":{
    "en":"Logic Gates",
    "se":"Logiska Grindar"
  },
  "undo":{
    "en":"Undo (Ctrl + Z)",
    "se":"Ångra (Ctrl + Z)"
  },
  "redo":{
    "en":"Redo (Ctrl + Y)",
    "se":"Gör om (Ctrl + Y)"
  },
  "copy":{
    "en":"Copy (Ctrl + C)",
    "se":"Kopiera (Ctrl + C)"
  },
  "cut":{
    "en":"Cut (Ctrl + X)",
    "se":"Klipp (Ctrl + X)"
  },
  "paste":{
    "en":"Paste (Ctrl + V)",
    "se":"Klistra (Ctrl + V)"
  },
  "delete":{
    "en":"Delete (Backspace)",
    "se":"Radera (Bakåtslag)"
  },
  "python-intro":{
    "en":"Python is a widely used high-level programming language for general-purpose programming. This is why it is a good language to start with when you are going to study Information Technology at Uppsala University. Below is an interactive tutorial in order for you to get a basic understanding of python.",
    "se":"Python är ett brett användt hög-nivå språk för generellt programmeringsändamål. Detta är varför det är bra intro-språk för studier inom Informationsteknologi på Uppsala Universitet. Nedan finns en interaktiv genomgång av det mest grundläggande inom python."
  },
  "hello-world":{
    "en":"When learning to program in a new language a good start is how to learn how to get the program to write \"Hello World!\"",
    "se":"När man lär sig programmera ett nytt språk så är det bra att börja med det mest grundläggande program som finns \"Hello World!\""
  },
  "hello-world2":{
    "en":"To tell the program what to print you simply use the word \"print\", and then in parentheses next to \"print\" tell the program what you want to be printed. Press the code example below and you will se what the program would produce.",
    "se":"För att säga till programet att skriva så använder man helt enkelt order \"print\", och sedan inom parantes efter \"print\" för att säga vad som ska skrivas. Se kodexemplet nedan för att se vad programmet gör."
  },
  "run-code":{
    "en":"Run code",
    "se":"Kör kod"
  },
  "try-it-yourself":{
    "en":"Now you try! Write python code so that when it executes it says \"Good bye!\"",
    "se":"Testa själv! Skriv python kod som när den körs säger \"Good bye!\""
  },
  "good-bye":{
    "en":"Good bye!",
    "se":"Hej då!"
  },
  "error-msg":{
    "en":"Error! You must have written the code wrong, try again",
    "se":"Error! Du måste ha skrivit något fel, testa igen"
  },
  "text-editor":{
    "en":"Text editor",
    "se":"Textredigerare"
  },
  "animation-title":{
    "en":"Animation",
    "se":"Animation"
  },
  "animation-text":{
  "en":"Here is an animation illustrating the binary system into a decimal number",
  "se":"Här är en animation som visar hur binäratal konverteras till decimaltal"
},
  "":{
    "en":"",
    "se":""
  }
}